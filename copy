#include <iostream>
using namespace std;

const int MOD = 1e9 + 7;
using Matrix = long long[2][2];

void multiply(Matrix a, Matrix b, Matrix res) {
    Matrix temp = {};
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            for (int k = 0; k < 2; ++k)
                temp[i][j] = (temp[i][j] + a[i][k] * b[k][j]) % MOD;
    copy(&temp[0][0], &temp[0][0] + 4, &res[0][0]);
}

void power(Matrix base, int exp, Matrix res) {
    Matrix identity = {{1, 0}, {0, 1}};
    while (exp) {
        if (exp % 2) multiply(res, base, res);
        multiply(base, base, base);
        exp /= 2;
    }
}

long long fib(int n) {
    if (n <= 1) return n;
    Matrix base = {{1, 1}, {1, 0}}, res = {{1, 0}, {0, 1}};
    power(base, n - 1, res);
    return res[0][0];
}

int main() {
    cout << fib(10) << endl;
}
