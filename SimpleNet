import torch
import torch.nn as nn
import torch.optim as optim

# 定义简单的全连接神经网络
class SimpleNet(nn.Module):
    def __init__(self, input_size, hidden_size, num_classes):
        super(SimpleNet, self).__init__()
        self.fc1 = nn.Linear(input_size, hidden_size)
        self.relu = nn.ReLU()
        self.fc2 = nn.Linear(hidden_size, num_classes)
    
    def forward(self, x):
        out = self.fc1(x)
        out = self.relu(out)
        out = self.fc2(out)
        return out

if __name__ == "__main__":
    # 超参数设置
    input_size = 10
    hidden_size = 20
    num_classes = 2
    num_samples = 100
    learning_rate = 0.01
    num_epochs = 50

    # 生成随机数据
    X = torch.randn(num_samples, input_size)
    y = torch.randint(0, num_classes, (num_samples,))

    # 初始化模型、损失函数和优化器
    model = SimpleNet(input_size, hidden_size, num_classes)
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=learning_rate)

    # 模型训练
    for epoch in range(num_epochs):
        outputs = model(X)
        loss = criterion(outputs, y)
        
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        
        if (epoch+1) % 10 == 0:
            print(f"Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.4f}")

    print("训练完成")
